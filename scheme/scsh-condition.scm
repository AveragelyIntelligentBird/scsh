;;; Copyright (c) 1994 by Olin Shivers
;;; Add scsh conditions to s48.

(define (with-errno-handler* handler thunk)
  (with-exception-handler
    (lambda (condition)
      (if (os-error? condition)
          (handler (os-error-code condition)
                   (list (condition-message condition)
                         (condition-who condition)
                         (condition-irritants condition)))
          (raise condition)))
    thunk))

(define (errno-error errno who message . irritants)
  (raise (condition
          (make-os-error errno)
          (make-who-condition who)
          (make-message-condition message)
          (make-irritants-condition irritants))))

(define-syntax weh-cond
  (syntax-rules (else)
    ((weh-cond () ((cond-condition cond-body) ...) error-number return)
     (cond (cond-condition cond-body) ...))
    ((weh-cond (((errno-name ...) clause-body ...) . other-clauses) (cond-clause ...) error-number return)
     (weh-cond other-clauses
               (cond-clause ... ((or (let ((maybe-errno (fixed-integer->errno error-number)))
                                       (and (errno? maybe-errno) (errno=? (errno errno-name) maybe-errno))) ...)
                                 (call-with-values (lambda () clause-body ...) return)))
               error-number return))
    ((weh-cond ((else clause-body ...) . other-clauses) (cond-clause ...) error-number return)
     (weh-cond other-clauses
               (cond-clause ... (else (call-with-values (lambda () clause-body ...) return)))
               error-number return))))

(define-syntax with-errno-handler
  (syntax-rules ()
    ((with-errno-handler
      ((err data)
       (clause-condition clause-body ...) ...)
      body ...)
     (call-with-current-continuation
      (lambda (return)
        (with-errno-handler*
         (lambda (err data)
           (weh-cond ((clause-condition clause-body ...) ...) () err return))
         (lambda () body ...)))))))

(define named-errnos
  (vector (errno toobig)
          (errno acces)
          (errno addrinuse)
          (errno addrnotavail)
          (errno afnosupport)
          (errno again)
          (errno already)
          (errno badf)
          (errno badmsg)
          (errno busy)
          (errno canceled)
          (errno child)
          (errno connaborted)
          (errno connrefused)
          (errno connreset)
          (errno deadlk)
          (errno destaddrreq)
          (errno dom)
          (errno dquot)
          (errno exist)
          (errno fault)
          (errno fbig)
          (errno hostunreach)
          (errno idrm)
          (errno ilseq)
          (errno inprogress)
          (errno intr)
          (errno inval)
          (errno io)
          (errno isconn)
          (errno isdir)
          (errno loop)
          (errno mfile)
          (errno mlink)
          (errno msgsize)
          (errno multihop)
          (errno nametoolong)
          (errno netdown)
          (errno netreset)
          (errno netunreach)
          (errno nfile)
          (errno nobufs)
          (errno nodata)
          (errno nodev)
          (errno noent)
          (errno noexec)
          (errno nolck)
          (errno nolink)
          (errno nomem)
          (errno nomsg)
          (errno noprotoopt)
          (errno nospc)
          (errno nosr)
          (errno nostr)
          (errno nosys)
          (errno notconn)
          (errno notdir)
          (errno notempty)
          (errno notsock)
          (errno notsup)
          (errno notty)
          (errno nxio)
          (errno opnotsupp)
          (errno overflow)
          (errno perm)
          (errno pipe)
          (errno proto)
          (errno protonosupport)
          (errno prototype)
          (errno range)
          (errno rofs)
          (errno spipe)
          (errno srch)
          (errno stale)
          (errno time)
          (errno timedout)
          (errno txtbsy)
          (errno wouldblock
          (errno xdev))))

(define (fixed-integer->errno num)
  (let loop ((i 0))
    (cond ((= i (vector-length named-errnos)) #f)
          (else
           (let* ((e (vector-ref named-errnos i))
                  (errno-number (errno-os-number e)))
             (if (and errno-number (= num errno-number))
                 e
                 (loop (+ i 1))))))))
